Notes concerning joining of cvs and svn histories in git:

In order to define a fast import stream git can append to the cvs conversion,
the svn export should use the marks for various objects and commits used by the
cvs history.  This list can be generated via git fast-export --all of the cvs
conversion while specifying a file in which to record the map:

cd brlcad_cvs_git
git fast-export --all --export-marks=../marks_file > ../export.fi
cd ..
mkdir repo_dir && cd repo_dir
git init
cat ../export.fi | git fast-import

A quick experiment using a manually adjusted incremenal output from
https://github.com/satori/git-svn-fast-import indicates the from property will
have to be defined in the new commits respecting the above marks, and new mark
ids should increment starting from the maximum mark in the marks_file

cat ../29887.fi | git fast-import --import-marks=../marks_file

Consequently, the svn fast-export code will have to be aware of the marks_file
contents when it generates its output.


When needing to extract subsets of a large svn dump for inspection, this is a
useful trick from stackoverflow to zero in on the subset of the dump in question:

head -n 150000000 brlcad_dercs.dump |tail -n 1000000|grep Revision-number

Once the range with the commit needed is identified, dump the results to a file
that can be inspected in an editor:

head -n 127200000 brlcad_dercs.dump |tail -n 500000 > subset.dump


dercs processing:

svnadmin dump code > brlcad_full.dump
svnadmin create repo_dercs
./svn_de-rcs brlcad_full.dump brlcad_full_dercs.dump
# We re-load after doing the dercs step to make sure that SVN
# agrees we still have a valid repository.
svnadmin load repo_dercs < brlcad_full_dercs.dump



CVS -> SVN sync:

The cvs repo stops at r29886, but the CVS conversion and the SVN repo
at that revision differ (apparently in line endings.)  To resolve this,
we have created "syncing" fast import files that update the git contents
of the necessary branches (so far, master and one of the rel-5 branches)
to match those of subversion.  The svnfexport tool now applies those as
the first step of a conversion when the commits start at 29886.

############################

There are a number of difficult revisions in svn that have also required
manual fast-import files.

It's proving simpler in cases where we're seeing svn and git differences to
create fi files manually with the following procedure:

Take the svn checkout and run the sync_commit.sh script.  Take the failed .fi
file (if present) or create the header to add to the generated .fi list.  Test
the file on the cvs_git_working directory, and use git hash-object to adjust
any entries that crash the fast import.  Once a working commit is obtained,
place it at custom/<rev_num>.fi and restart svnfexport.  Tweak file until any
diff issues are resolved, then commit as binary:

svn add custom/<rev_num>.fi
svn propset svn:mime-type application/octet-stream custom/<rev_num>.fi
svn commit

So far:

29982 - set svn:executable on all scripts (particularly so ./autogen.sh will work on checkout)
31039 - Adding branch refs/heads/STABLE from rel-7-12-2
32007 - Update misc/nsis in STABLE to rel-7-12-4
32009 - Update misc/win32-msvc* in STABLE to rel-7-12-4
32046 - Start merging the primitives reorg into pre-7-12-6
32314 - Adding branch refs/heads/STABLE from rel-7-12-6
33115 - big ultra mega merge from r32275 to r33114 (HEAD on trunk) in preparation for the pending 7.14.0 source release
36053 - And so begins preparations for the mighty "Release 8"...
36631 - Hrm, merging updates won't be so simple here.  Take the incremental approach.
36633 - Recreate the dmtogl branch with latest trunk as a start
36843 - Adding branch refs/heads/STABLE from refs/heads/master
36941 - Merge back in tkimg
37277 - Update incrTcl to itcl-ng cvs version as of January 15, 2010

It's looking like there may be a fair number of these, so will probably
need to store them somewhere other than the svn repo.

Expected:
39465 - Adding branch refs/heads/dmtogl from refs/heads/master

############################

svnfexport:

./svnfexport brlcad_full_dercs.dump authormap




#############################

Note: here is a simple way to use notes with svn revision numbers to checkout a specific revision:

git log --all --pretty=format:"%H %N" --grep svn:revision:29886|awk '{system("git checkout "$1)}'

To make this easier, add the following alias to your .gitconfig file:

	svnrev = "!f() { \
		if [ x$1 != x ] ; then \
		   REVSHA1=\"$(git log --all --pretty=format:\"%H %N\" --grep svn:revision:$1|awk '{system(\"echo \"$1)}')\"; \
		   if [ x$REVSHA1 != x ] ; then \
		      git checkout $REVSHA1; \
		   else \
		      echo Unknown revision number: $1; \
		   fi; \
		else \
		   echo Need revision number; \
		fi; \
		}; f"

With that alias in place, the command "git svnrev 29886" will check out the git
commit with a not matching the pattern "svn:revision:29886"


##############################

In svn, we can svn log in a particular branch checkout to see the history
specific to that branch, but this is apparently a challenge in git.  The
following logic added to your .gitconfig defines a logb command that will list
commits unique to either the currently checked out branch (if you don't supply
a branch name) or the specified branch if you specify one. (This packages up
the tricks from https://stackoverflow.com/q/14848274 and
https://stackoverflow.com/a/12142066)

        logb = "!f() { \
                if [ x$1 != x ] ; then \
                   git log $1 --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v \"refs/heads/$1\"); \
                else \
                   CURRBRANCH=\"$(git rev-parse --abbrev-ref HEAD)\"; \
                   git log $CURRBRANCH --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v \"refs/heads/$CURRBRANCH\"); \
                fi; \
                }; f"


