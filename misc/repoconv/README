Notes concerning joining of cvs and svn histories in git:

In order to define a fast import stream git can append to the cvs conversion,
the svn export should use the marks for various objects and commits used by the
cvs history.  This list can be generated via git fast-export --all of the cvs
conversion while specifying a file in which to record the map:

cd brlcad_cvs_git
git fast-export --all --export-marks=../marks_file > ../export.fi
cd ..
mkdir repo_dir && cd repo_dir
git init
cat ../export.fi | git fast-import

A quick experiment using a manually adjusted incremenal output from
https://github.com/satori/git-svn-fast-import indicates the from property will
have to be defined in the new commits respecting the above marks, and new mark
ids should increment starting from the maximum mark in the marks_file

cat ../29887.fi | git fast-import --import-marks=../marks_file

Consequently, the svn fast-export code will have to be aware of the marks_file
contents when it generates its output.


When needing to extract subsets of a large svn dump for inspection, this is a
useful trick from stackoverflow to zero in on the subset of the dump in question:

head -n 150000000 brlcad_dercs.dump |tail -n 1000000|grep Revision-number

Once the range with the commit needed is identified, dump the results to a file
that can be inspected in an editor:

head -n 127200000 brlcad_dercs.dump |tail -n 500000 > subset.dump


dercs processing:

svnadmin dump code > brlcad_full.dump
svnadmin create repo_dercs
./svn_de-rcs brlcad_full.dump brlcad_full_dercs.dump
# We re-load after doing the dercs step to make sure that SVN
# agrees we still have a valid repository.
svnadmin load repo_dercs < brlcad_full_dercs.dump



CVS -> SVN sync:

The cvs repo stops at r29886, but the CVS conversion and the SVN repo
at that revision differ (apparently in line endings.)  To resolve this,
we generate a single revision dump file from the dercs repo:

svnadmin dump -r29886 repo_dercs > brlcad_r29886.dump

Per svnadmin's docs, this will create an r29886 commit in the dump
that describes every path present in the SVN tree as of that commit.  In
principle (to be tested) this should mean we can look for any missing blobs
not present in the git blob set and identify paths that need to be synced
up before we can proceed.  A specialized version of the svnfexport binary
generates this specific file:

./cvssvnsync brlcad_r29886.dump authormap brlcad_cvs_git_heads_sha1.txt brlcad_cvs_git_all_blob_sha1.txt

It will generate a r29886_sync.fi file which should be applied to the git repo
before starting to append actual SVN only commits.

cd brlcad_cvs_git-<date>
cat ../r29886_sync.fi | git fast-import
git reset --hard

Having made that update, we now need to update the sha1 files:

git show-ref --heads --tags > ../brlcad_cvs_git_heads_sha1.txt
git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' | grep '^[^ ]* blob' | cut -d" " -f1,3- > ../brlcad_cvs_git_all_blob_sha1.txt

Make a null object in the database to be sure we have it:

(There may be a better way to do this...)
git hash-object -w --stdin < /dev/null
cat "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 src/other/tkhtml3/AUTHORS" >> ../brlcad_cvs_git_all_blob_sha1.txt


############################

There are a number of branch adds/deletes which will require special attention:

Processing revision 31020
Delete branch instruction: refs/heads/STABLE - deferring.
Processing revision 31039
Adding branch refs/heads/STABLE from rel-7-12-2
Processing revision 32017
Adding branch refs/heads/pre-7-12-6 from refs/heads/STABLE
Processing revision 32313
Delete branch instruction: refs/heads/STABLE - deferring.
Processing revision 32314
Adding branch refs/heads/STABLE from rel-7-12-6
Processing revision 36842
Delete branch instruction: refs/heads/STABLE - deferring.
Processing revision 36843
Adding branch refs/heads/STABLE from refs/heads/master


There appear to be some specific instructions in git's fast-import for deleting all contents
of a branch and starting over.  To do that rebuilding, it might be simpler to write some
special case fi parsers to operate on specific revision dumps to get the full branch file
sets for those commits - the main svnfexport exectable isn't really tracking that directly.

Also needing special awareness will be the dmtogl branches:

Processing revision 36185
Adding branch refs/heads/dmtogl-branch from refs/heads/master
Processing revision 36472
Adding branch refs/heads/dmtogl from refs/heads/dmtogl-branch
Processing revision 36472
Delete branch instruction: refs/heads/dmtogl-branch - deferring.
Processing revision 36632
Delete branch instruction: refs/heads/dmtogl - deferring.
Processing revision 36633
Adding branch refs/heads/dmtogl from refs/heads/master
Processing revision 39464
Delete branch instruction: refs/heads/dmtogl - deferring.
Processing revision 39465
Adding branch refs/heads/dmtogl from refs/heads/master

That works out to needing the following commits:

Need to make a deleteall + full update commit to make STABLE match rel-7-12-2
svnadmin dump -r31039 repo_dercs > brlcad_r31039.dump

Need to make a deleteall + full update commit to make STABLE match rel-7-12-6
svnadmin dump -r32314 repo_dercs > brlcad_r32314.dump

Need to make a deleteall + full update commit to make dmtogl match trunk
svnadmin dump -r36633 repo_dercs > brlcad_r36633.dump

Need to make a deleteall + full update commit to make STABLE match rel-7-12-6
svnadmin dump -r36843 repo_dercs > brlcad_r36843.dump

Need to make a deleteall + full update commit to make dmtogl match trunk
svnadmin dump -r39465 repo_dercs > brlcad_r39465.dump



############################

svnfexport:

./svnfexport brlcad_full_dercs.dump authormap brlcad_cvs_git_heads_sha1.txt brlcad_cvs_git_all_blob_sha1.txt




#############################

Note: here is a simple way to use notes with svn revision numbers to checkout a specific revision:

git log --all --pretty=format:"%H %N" --grep svn:revision:29886|awk '{system("git checkout "$1)}'

To make this easier, add the following alias to your .gitconfig file:

	svnrev = "!f() { \
		if [ x$1 != x ] ; then \
		   REVSHA1=\"$(git log --all --pretty=format:\"%H %N\" --grep svn:revision:$1|awk '{system(\"echo \"$1)}')\"; \
		   if [ x$REVSHA1 != x ] ; then \
		      git checkout $REVSHA1; \
		   else \
		      echo Unknown revision number: $1; \
		   fi; \
		else \
		   echo Need revision number; \
		fi; \
		}; f"

With that alias in place, the command "git svnrev 29886" will check out the git
commit with a not matching the pattern "svn:revision:29886"

