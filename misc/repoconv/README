Notes concerning joining of cvs and svn histories in git:

In order to define a fast import stream git can append to the cvs conversion,
the svn export should use the marks for various objects and commits used by the
cvs history.  This list can be generated via git fast-export --all of the cvs
conversion while specifying a file in which to record the map:

cd brlcad_cvs_git
git fast-export --all --export-marks=../marks_file > ../export.fi
cd ..
mkdir repo_dir && cd repo_dir
git init
cat ../export.fi | git fast-import

A quick experiment using a manually adjusted incremenal output from
https://github.com/satori/git-svn-fast-import indicates the from property will
have to be defined in the new commits respecting the above marks, and new mark
ids should increment starting from the maximum mark in the marks_file

cat ../29887.fi | git fast-import --import-marks=../marks_file

Consequently, the svn fast-export code will have to be aware of the marks_file
contents when it generates its output.


When needing to extract subsets of a large svn dump for inspection, this is a
useful trick from stackoverflow to zero in on the subset of the dump in question:

head -n 150000000 brlcad_dercs.dump |tail -n 1000000|grep Revision-number

Once the range with the commit needed is identified, dump the results to a file
that can be inspected in an editor:

head -n 127200000 brlcad_dercs.dump |tail -n 500000 > subset.dump


dercs processing:

svnadmin dump code > brlcad_full.dump
svnadmin create repo_dercs
./svn_de-rcs brlcad_full.dump brlcad_full_dercs.dump
# We re-load after doing the dercs step to make sure that SVN
# agrees we still have a valid repository.
svnadmin load repo_dercs < brlcad_full_dercs.dump



CVS -> SVN sync:

The cvs repo stops at r29886, but the CVS conversion and the SVN repo
at that revision differ (apparently in line endings.)  To resolve this,
we generate a single revision dump file from the dercs repo:

svnadmin dump -r29886 repo_dercs > brlcad_r29886.dump

Per svnadmin's docs, this will create an r29886 commit in the dump
that describes every path present in the SVN tree as of that commit.  In
principle (to be tested) this should mean we can look for any missing blobs
not present in the git blob set and identify paths that need to be synced
up before we can proceed.  A specialized version of the svnfexport binary
generates this specific file:

./cvssvnsync brlcad_r29886.dump authormap brlcad_cvs_git_heads_sha1.txt brlcad_cvs_git_all_blob_sha1.txt

It will generate a r29886_sync.fi file which should be applied to the git repo
before starting to append actual SVN only commits.

cd brlcad_cvs_git-<date>
cat ../r29886_sync.fi | git fast-import
git reset --hard

Having made that update, we now need to update the sha1 files:

git show-ref --heads --tags > ../brlcad_cvs_git_heads_sha1.txt
git rev-list --objects --all | git cat-file --batch-check='%(objectname) %(objecttype) %(rest)' | grep '^[^ ]* blob' | cut -d" " -f1,3- > ../brlcad_cvs_git_all_blob_sha1.txt


svnfexport:

./svnfexport brlcad_full_dercs.dump authormap brlcad_cvs_git_heads_sha1.txt brlcad_cvs_git_all_blob_sha1.txt
