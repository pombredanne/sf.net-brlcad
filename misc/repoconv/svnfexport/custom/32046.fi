blob
data 1450
# $Id$

SUBDIRS = conf

brlcadincludedir = $(includedir)/brlcad

brlcadinclude_required = \
	RtServerImpl.h \
	bn.h \
	brlcad_config.h \
	bu.h \
	common.h \
	config_win.h \
	ged.h \
	magic.h \
	raytrace.h \
	rtgeom.h \
	rtprivate.h \
	rtserver.h \
	tclcad.h

brlcadinclude_wanted = \
	anim.h \
	bot.h \
	brep.h \
	brlcad.h \
	cmd.h \
	db.h \
	db5.h \
	dg.h \
	dm-Null.h \
	dm-X.h \
	dm-glx.h \
	dm-ogl.h \
	dm-wgl.h \
	dm-pex.h \
	dm-plot.h \
	dm-ps.h \
	dm-tk.h \
	dm.h \
	dm_color.h \
	dm_xvars.h \
	fb.h \
	fbio.h \
	fbserv_obj.h \
	libtermio.h \
	light.h \
	mater.h \
	nmg.h \
	nurb.h \
	opennurbs_ext.h \
	optical.h \
	orle.h \
	photonmap.h \
	pkg.h \
	plastic.h \
	plot3.h \
	redblack.h \
	shadefuncs.h \
	shadework.h \
	solid.h \
	spectrum.h \
	spm.h \
	vectfont.h \
	vector_fpu.h \
	vector.h \
	vector_x86.h \
	vfont-if.h \
	vmath.h \
	wdb.h

# headers used by multiple packages but still considered private.
# public headers should NOT include these headers.
noinst_HEADERS = \
	brlcad_version.h \
	bio.h \
	conf.h \
	fbmsg.h \
	machine.h \
	sysv.h

EXTRA_DIST = \
	on_nurb.h \
	sed4

if ONLY_BENCHMARK
brlcadinclude_HEADERS = $(brlcadinclude_required)

else
# else !ONLY_BENCHMARK

if ONLY_RTS
brlcadinclude_HEADERS = $(brlcadinclude_required)

else
# else !ONLY_RTS
brlcadinclude_HEADERS = \
	$(brlcadinclude_required) \
	$(brlcadinclude_wanted)

endif
# end ONLY_RTS

endif
# end ONLY_BENCHMARK


include $(top_srcdir)/misc/Makefile.defs
blob
data 3260
/** @mainpage
 *
 * Documentation of BRL-CAD<sup>tm</sup> libraries.
 *
 * This
 * is the second iteration of the documentation.  Pages have been subdivided
 * and should load much more quickly in your browser now.
 *
 * At this point, only the libbu module has been fully converted to the
 * new format.  Other modules should follow soon.
 */
/** @defgroup libbu libbu (utility functions)
 *
 * @defgroup avs Attribute/Value Sets
 * @ingroup libbu
 *
 * @defgroup bitv Bit Vectors
 * @ingroup libbu
 *
 * @defgroup color Color
 * @ingroup libbu
 *
 * @defgroup conv Data Conversion
 * @ingroup libbu
 *
 * @addtogroup bu_debug Debugging
 * @ingroup libbu
 *
 * @defgroup hton Endian Support
 * @ingroup libbu
 *
 * @defgroup getopt getopt
 * @ingroup libbu
 *
 * @defgroup bu_hash Hashing
 * @ingroup libbu
 *
 * @defgroup bu_hist Histogram Support
 * @ingroup libbu
 *
 * @defgroup bu_list Linked Lists
 * @ingroup libbu
 *
 * @defgroup mf Mapped Files
 * @ingroup libbu
 *
 * @defgroup malloc Memory
 * @ingroup libbu
 *
 * @defgroup magic Magic Numbers
 * @ingroup libbu
 *
 * @defgroup mro Multiply Represented Objects
 * @ingroup libbu
 *
 * @defgroup thread Parallel processing, semaphores
 * @ingroup libbu
 *
 * @defgroup ptbl Pointer Tables
 * @ingroup libbu
 *
 * @defgroup bu_log File I/O
 * @ingroup libbu
 *
 * @defgroup rb RedBlack trees
 * @ingroup libbu
 *
 * @defgroup parse Structure Parse/Print/read/write
 * @ingroup libbu
 *
 * @defgroup butcl Tcl
 * @ingroup libbu
 *
 * @defgroup vls Variable Length Strings
 * @ingroup libbu
 *
 * @defgroup vfont vector fonts
 * @ingroup libbu
 */

/** @defgroup libbn libbn (numerical functions)
 *
 * @defgroup anim Animation
 * @ingroup libbn
 *
 * @defgroup axis Axis
 * @ingroup libbn
 *
 * @defgroup complex Complex Numbers
 * @ingroup libbn
 *
 * @defgroup const Constants
 * @ingroup libbn
 *
 * @defgroup vlist Display Lists
 * @ingroup libbn
 *
 * @defgroup plot Plot/Draw
 * @ingroup libbn
 *
 * @defgroup noise Fractal Noise
 * @ingroup libbn
 *
 * @defgroup mat Matrix/Vector/Quaternion Math
 * @ingroup libbn
 *
 * @defgroup plane Point/Line/Plane Geometry Math
 * @ingroup libbn
 *
 * @defgroup poly Polynomials
 * @ingroup libbn
 *
 * @defgroup rand Random Numbers
 * @ingroup libbn
 *
 * @defgroup msr Minimal Standard Random Numbers
 * @ingroup rand
 *
 * @defgroup bntcl bn Tcl interface
 * @ingroup libbn
 *
 * @defgroup rnd Random Number Tables
 * @ingroup rand
 *
 * @defgroup sphmap spherical maps
 * @ingroup libbn
 *
 * @defgroup tol Tolerances
 * @ingroup libbn
 *
 * @defgroup vtree Vertex Trees
 * @ingroup libbn
 *
 * @defgroup wavelet Wavelets
 * @ingroup libbn
 *

/** @defgroup libfb libfb (framebuffer) */


/** @defgroup librt librt geometry, raytracing
 *
 * @defgroup dbio Database IO
 * @ingroup librt
 *
 * @defgroup db5 Database5
 * @ingroup dbio
 *
 * @defgroup db4 Database4
 * @ingroup dbio
 *
 * @defgroup primitives Primitives
 * @ingroup librt
 *
 * @defgroup nmg N-Manifold Geometry
 * @ingroup primitives
 *
 * @defgroup nurb NURBS
 * @ingroup primitives
 *
 ** @defgroup ray Ray Tracing
 * @ingroup librt
 *
 * @defgroup timer Timer
 * @ingroup librt
 *
 * @defgroup fort Fortran
 * @ingroup librt
 *
 * @defgroup wdb WriteDatabase
 * @ingroup dbio
 */
blob
data 19101
<?xml version="1.0" encoding="Windows-1252"?>
<VisualStudioProject
	ProjectType="Visual C++"
	Version="8.00"
	Name="librt"
	ProjectGUID="{EA0BB405-25E2-4B31-92D7-97316770F32B}"
	RootNamespace="librt"
	>
	<Platforms>
		<Platform
			Name="Win32"
		/>
		<Platform
			Name="x64"
		/>
	</Platforms>
	<ToolFiles>
	</ToolFiles>
	<Configurations>
		<Configuration
			Name="Release|Win32"
			OutputDirectory=".\$(PlatformName)\$(ConfigurationName)"
			IntermediateDirectory=".\$(PlatformName)\$(ConfigurationName)"
			ConfigurationType="2"
			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
			UseOfMFC="0"
			ATLMinimizesCRunTimeLibraryUsage="false"
			CharacterSet="2"
			>
			<Tool
				Name="VCPreBuildEventTool"
			/>
			<Tool
				Name="VCCustomBuildTool"
			/>
			<Tool
				Name="VCXMLDataGeneratorTool"
			/>
			<Tool
				Name="VCWebServiceProxyGeneratorTool"
			/>
			<Tool
				Name="VCMIDLTool"
				PreprocessorDefinitions="NDEBUG"
				MkTypLibCompatible="true"
				SuppressStartupBanner="true"
				TargetEnvironment="1"
				TypeLibraryName=".\$(PlatformName)\$(ConfigurationName)/librt.tlb"
				HeaderFileName=""
			/>
			<Tool
				Name="VCCLCompilerTool"
				Optimization="2"
				InlineFunctionExpansion="1"
				AdditionalIncludeDirectories="../../../include;../../../src/librt;../../../src/other/libregex;../../../src/other/tcl/generic;../../../src/other/tcl/win;../../../src/other/libz;../../../src/other/opennurbs;../../../src/other/tnt"
				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;__win32;ON_DLL_IMPORTS;RT_EXPORT_DLL;DB5_EXPORT_DLL;BRLCAD_DLL;HAVE_CONFIG_H;BRLCADBUILD;NEW_TOPS_BEHAVIOR;OBJ_BREP=1;TCL_THREADS=1;_RT_DECL_IFREE;_CRT_SECURE_NO_WARNINGS"
				StringPooling="true"
				BasicRuntimeChecks="0"
				RuntimeLibrary="2"
				EnableFunctionLevelLinking="true"
				TreatWChar_tAsBuiltInType="false"
				RuntimeTypeInfo="true"
				UsePrecompiledHeader="0"
				PrecompiledHeaderFile=".\$(PlatformName)\$(ConfigurationName)/librt.pch"
				AssemblerListingLocation=".\$(PlatformName)\$(ConfigurationName)/"
				ObjectFile=".\$(PlatformName)\$(ConfigurationName)/"
				ProgramDataBaseFileName=".\$(PlatformName)\$(ConfigurationName)/"
				WarningLevel="3"
				SuppressStartupBanner="true"
				Detect64BitPortabilityProblems="false"
				DebugInformationFormat="0"
				CompileAs="0"
			/>
			<Tool
				Name="VCManagedResourceCompilerTool"
			/>
			<Tool
				Name="VCResourceCompilerTool"
				PreprocessorDefinitions="NDEBUG"
				Culture="1033"
			/>
			<Tool
				Name="VCPreLinkEventTool"
			/>
			<Tool
				Name="VCLinkerTool"
				AdditionalDependencies="tcl85.lib libbu.lib libbn.lib libsysv.lib libregex.lib opennurbs.lib"
				OutputFile=".\$(PlatformName)\$(ConfigurationName)/librt.dll"
				LinkIncremental="1"
				SuppressStartupBanner="true"
				AdditionalLibraryDirectories="../../../brlcadInstall/lib"
				GenerateDebugInformation="false"
				ProgramDatabaseFile=".\$(PlatformName)\$(ConfigurationName)/librt.pdb"
				ImportLibrary=".\$(PlatformName)\$(ConfigurationName)/librt.lib"
				TargetMachine="1"
			/>
			<Tool
				Name="VCALinkTool"
			/>
			<Tool
				Name="VCManifestTool"
			/>
			<Tool
				Name="VCXDCMakeTool"
			/>
			<Tool
				Name="VCBscMakeTool"
			/>
			<Tool
				Name="VCFxCopTool"
			/>
			<Tool
				Name="VCAppVerifierTool"
			/>
			<Tool
				Name="VCWebDeploymentTool"
			/>
			<Tool
				Name="VCPostBuildEventTool"
				CommandLine="copy &quot;$(TargetPath)&quot; ..\..\..\brlcadInstall\bin&#x0D;&#x0A;copy &quot;$(TargetDir)&quot;librt.lib ..\..\..\brlcadInstall\lib&#x0D;&#x0A;"
			/>
		</Configuration>
		<Configuration
			Name="Release|x64"
			OutputDirectory="$(PlatformName)\$(ConfigurationName)"
			IntermediateDirectory="$(PlatformName)\$(ConfigurationName)"
			ConfigurationType="2"
			InheritedPropertySheets="$(VCInstallDir)VCProjectDefaults\UpgradeFromVC71.vsprops"
			UseOfMFC="0"
			ATLMinimizesCRunTimeLibraryUsage="false"
			CharacterSet="2"
			>
			<Tool
				Name="VCPreBuildEventTool"
			/>
			<Tool
				Name="VCCustomBuildTool"
			/>
			<Tool
				Name="VCXMLDataGeneratorTool"
			/>
			<Tool
				Name="VCWebServiceProxyGeneratorTool"
			/>
			<Tool
				Name="VCMIDLTool"
				PreprocessorDefinitions="NDEBUG"
				MkTypLibCompatible="true"
				SuppressStartupBanner="true"
				TargetEnvironment="3"
				TypeLibraryName=".\$(PlatformName)\$(ConfigurationName)/librt.tlb"
				HeaderFileName=""
			/>
			<Tool
				Name="VCCLCompilerTool"
				Optimization="2"
				InlineFunctionExpansion="1"
				AdditionalIncludeDirectories="../../../include;../../../src/librt;../../../src/other/tcl/generic;../../../src/other/tcl/win;../../../src/other/libz;../../../src/other/opennurbs;../../../src/other/tnt"
				PreprocessorDefinitions="WIN32;NDEBUG;_WINDOWS;_USRDLL;__win32;ON_DLL_IMPORTS;RT_EXPORT_DLL;DB5_EXPORT_DLL;BRLCAD_DLL;HAVE_CONFIG_H;BRLCADBUILD;NEW_TOPS_BEHAVIOR;OBJ_BREP=1;TCL_THREADS=1;_RT_DECL_IFREE;_CRT_SECURE_NO_WARNINGS"
				StringPooling="true"
				BasicRuntimeChecks="0"
				RuntimeLibrary="2"
				EnableFunctionLevelLinking="true"
				TreatWChar_tAsBuiltInType="false"
				RuntimeTypeInfo="true"
				UsePrecompiledHeader="0"
				PrecompiledHeaderFile=".\$(PlatformName)\$(ConfigurationName)/librt.pch"
				AssemblerListingLocation=".\$(PlatformName)\$(ConfigurationName)/"
				ObjectFile=".\$(PlatformName)\$(ConfigurationName)/"
				ProgramDataBaseFileName=".\$(PlatformName)\$(ConfigurationName)/"
				WarningLevel="3"
				SuppressStartupBanner="true"
				Detect64BitPortabilityProblems="false"
				DebugInformationFormat="0"
				CompileAs="0"
			/>
			<Tool
				Name="VCManagedResourceCompilerTool"
			/>
			<Tool
				Name="VCResourceCompilerTool"
				PreprocessorDefinitions="NDEBUG"
				Culture="1033"
			/>
			<Tool
				Name="VCPreLinkEventTool"
			/>
			<Tool
				Name="VCLinkerTool"
				AdditionalDependencies="tcl85.lib libbu.lib libbn.lib libsysv.lib libregex.lib opennurbs.lib"
				OutputFile=".\$(PlatformName)\$(ConfigurationName)/librt.dll"
				LinkIncremental="1"
				SuppressStartupBanner="true"
				AdditionalLibraryDirectories="../../../brlcadInstall$(PlatformName)/lib"
				GenerateDebugInformation="false"
				ProgramDatabaseFile=".\$(PlatformName)\$(ConfigurationName)/librt.pdb"
				ImportLibrary=".\$(PlatformName)\$(ConfigurationName)/librt.lib"
				TargetMachine="17"
			/>
			<Tool
				Name="VCALinkTool"
			/>
			<Tool
				Name="VCManifestTool"
			/>
			<Tool
				Name="VCXDCMakeTool"
			/>
			<Tool
				Name="VCBscMakeTool"
			/>
			<Tool
				Name="VCFxCopTool"
			/>
			<Tool
				Name="VCAppVerifierTool"
			/>
			<Tool
				Name="VCWebDeploymentTool"
			/>
			<Tool
				Name="VCPostBuildEventTool"
				CommandLine="copy &quot;$(TargetPath)&quot; ..\..\..\brlcadInstall$(PlatformName)\bin&#x0D;&#x0A;copy &quot;$(TargetDir)&quot;librt.lib ..\..\..\brlcadInstall$(PlatformName)\lib&#x0D;&#x0A;"
			/>
		</Configuration>
	</Configurations>
	<References>
	</References>
	<Files>
		<Filter
			Name="Source Files"
			Filter="cpp;c;cxx;rc;def;r;odl;idl;hpj;bat;f90;for;f;fpp"
			>
			<File
				RelativePath="..\..\..\src\librt\bezier_2d_isect.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\binary_obj.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\bomb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\bool.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\bundle.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\cmd.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\cut.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_alloc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_bin.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_comb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_io.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_scan.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db5_types.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_alloc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_anim.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_comb.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_flags.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_inmem.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_io.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_lookup.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_match.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_open.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_path.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_scan.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_tree.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\db_walk.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\dir.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\dspline.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\fortray.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\arb8\arb8.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\arbn\arbn.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\ars\ars.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bot\bot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\brep\brep.cpp"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\cline\cline.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\dsp\dsp.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\ebm\ebm.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\ehy\ehy.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\ell\ell.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\epa\epa.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\eto\eto.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\extrude\extrude.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\grip\grip.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\half\half.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\hf\hf.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\hyp\hyp.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\metaball\metaball.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\bspline.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\part\part.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\poly\poly.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\pipe\pipe.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\rec\rec.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\rhc\rhc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\rpc\rpc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\sketch\sketch.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\sph\sph.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\submodel\submodel.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\superell\superell.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\tgc\tgc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\torus\torus.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\vol\vol.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\globals.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\htbl.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\many.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\mater.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\memalloc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\mirror.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\mkbundle.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_bool.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_ck.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_class.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_eval.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_extrude.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_fcut.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_fuse.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_index.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_info.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_inter.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_manif.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_mesh.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_misc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_mk.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_mod.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_plot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_pr.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_pt_fu.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_rt_isect.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_rt_segs.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_tri.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\nmg\nmg_visit.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_basis.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_bezier.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_bound.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_c2.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_copy.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_diff.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_eval.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_flat.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_interp.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_knot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_norm.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_plot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_poly.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_ray.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_refine.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_reverse.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_solve.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_split.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_tess.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_trim.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_trim_util.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_util.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\primitives\bspline\nurb_xsplit.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\opennurbs_ext.cpp"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\oslo_calc.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\oslo_map.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\pr.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\prep.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\regionfix.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\roots.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\shoot.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\spectrum.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\storage.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\table.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\tcl.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\timer-nt.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\transform.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\tree.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\vers.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\vlist.c"
				>
			</File>
			<File
				RelativePath="..\..\..\src\librt\wdb.c"
				>
			</File>
		</Filter>
		<Filter
			Name="Header Files"
			Filter="h;hpp;hxx;hm;inl;fi;fd"
			>
		</Filter>
		<Filter
			Name="Resource Files"
			Filter="ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe"
			>
		</Filter>
	</Files>
	<Globals>
	</Globals>
</VisualStudioProject>
blob
data 15987
/*                 B O T _ S H E L L - V T K . C
 * BRL-CAD
 *
 * Copyright (c) 2004-2008 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this file; see the file named COPYING for more
 * information.
 *
 */
/** @file bot_shell-vtk.c
 *
 * This program uses raytracing to determine which triangles of the
 * specified objects are external, and includes them in an output VTK
 * polydata file.
 *
 * Each triangle gets one ray shot at it along its normal from outside
 * the model bounding box.  If that triangle appears as the first
 * object hit along the ray, then that triangle is added to the output
 * list. Only triangles from BOT primitives are considered as
 * candidates for inclusion in the VTK data. Non-BOT primitives that
 * get hit along the ray may "hide" BOT triangles, but they will not
 * be represented in the output.
 *
 * The "-m" option specifies that triangles that are first or last on
 * each ray should be included in the output. This can improve
 * performance, but can also degrade performance considerabley. With
 * the "-m" option, "onehit" processing is turned off.
 *
 * If a "-g" option is provided, then rays are shot from a uniform
 * grid from three orthogonal directions and the first and last
 * triangles hit are included in the output (implies "-m").
 *
 * If a "-n" option is provided, then vertex normals will be included
 * in the VTK output data.  Note that this will not provide any
 * additional information unless the BOT primitives in the model have
 * vertex normals. This can significantly increase the size of the VTK
 * output file.
 */

#include "common.h"

/* system headers */
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "bio.h"

/* interface headers */
#include "vmath.h"
#include "nmg.h"
#include "rtgeom.h"
#include "raytrace.h"
#include "bot.h"


static int debug=0;
static int use_normals=0;
static double cell_size=0.0;
static char *output_file;
static FILE *fd_out;
static struct rt_i *rtip;
static struct bn_tol tol;
static struct vert_root *verts;
static long *faces=NULL;
static long max_faces=0;
static long num_faces=0;
#define FACES_BLOCK	512

static char *usage="Usage:\n\
	%s [-m] [-n] [-d debug_level] [-g cell_size] -o vtk_polydata_output_file database.g object1 object2...\n";

/* routine to replace default overlap handler.
 * overlaps are irrelevant to this application
 */
static int
a_overlap( ap, pp, reg1, reg2, pheadp )
    register struct application     *ap;
    register struct partition       *pp;
    struct region                   *reg1;
    struct region                   *reg2;
    struct partition                *pheadp;
{
    return( 1 );
}


static int
miss( ap )
    register struct application *ap;
{
    return(0);
}

static void
Add_face( int face[3] )
{
    long i;

    if ( debug) {
	bu_log( "Adding face %d %d %d\n", V3ARGS( face ) );
	for ( i=0; i<3; i++ ) {
	    bu_log( "\t( %g %g %g )\n", V3ARGS( &verts->the_array[ face[i]*3 ] ) );
	}
    }

    for ( i=0; i<num_faces*3; i+=3 ) {
	if ( faces[i] == face[0] ) {
	    if ( faces[i+1] == face[1] && faces[i+2] == face[2] ) {
		if ( debug ) {
		    bu_log( "Duplicate face ignored\n" );
		}
		return;
	    }
	}
    }

    if ( num_faces >= max_faces ) {
	max_faces += FACES_BLOCK;
	faces = (long *)bu_realloc( (genptr_t)faces, max_faces*3*sizeof(long), "faces array" );
    }

    VMOVE( &faces[num_faces*3], face );
    num_faces++;
}

static int
hit( struct application *ap, struct partition *part, struct seg *seg )
{
    struct partition *p;
    int surfno;
    struct soltab *stp;
    double x, y, z, nx, ny, nz;
    int face[3];
    int i;
    struct tri_specific *tri;
    struct bot_specific *bot;


    if ( debug ) {
	bu_log( "got a hit\n" );
    }

    /* get the first hit */
    p = part->pt_forw;
    surfno = p->pt_inhit->hit_surfno;
    stp = p->pt_inseg->seg_stp;
    if ( stp->st_id != ID_BOT ) {
	if ( debug ) {
	    bu_log( "hit a non-BOT primitive (ignoring)\n" );
	}
	if ( ap->a_onehit != 0 ) {
	    return 0;
	}
    } else {
	bot = (struct bot_specific *)stp->st_specific;
	if ( bot->bot_facearray ) {
	    tri = bot->bot_facearray[surfno];
	} else {
	    i = bot->bot_ntri - 1;
	    tri = bot->bot_facelist;
	    while ( i != surfno ) {
		i--;
		tri = tri->tri_forw;
	    }
	}
	if ( debug ) {
	    bu_log( "\thit at (%g %g %g) on %s surfno = %d\n",
		    V3ARGS( p->pt_inhit->hit_point ), stp->st_dp->d_namep, surfno );
	}


	/* get the first vertex */
	x = tri->tri_A[X];
	y = tri->tri_A[Y];
	z = tri->tri_A[Z];
	if ( tri->tri_normals ) {
	    nx = tri->tri_normals[X];
	    ny = tri->tri_normals[Y];
	    nz = tri->tri_normals[Z];
	} else {
	    nx = tri->tri_N[X];
	    ny = tri->tri_N[Y];
	    nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if ( use_normals ) {
	    face[0] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
	    face[0] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if ( debug ) {
	    bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		    face[0], x, y, z, nx, ny, nz );
	}

	/* get the second vertex */
	x = tri->tri_A[X] + tri->tri_BA[X];
	y = tri->tri_A[Y] + tri->tri_BA[Y];
	z = tri->tri_A[Z] + tri->tri_BA[Z];
	if ( tri->tri_normals ) {
	    nx = tri->tri_normals[X+3];
	    ny = tri->tri_normals[Y+3];
	    nz = tri->tri_normals[Z+3];
	} else {
	    nx = tri->tri_N[X];
	    ny = tri->tri_N[Y];
	    nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if ( use_normals ) {
	    face[1] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
	    face[1] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if ( debug ) {
	    bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		    face[1], x, y, z, nx, ny, nz );
	}

	/* get the third vertex */
	x = tri->tri_A[X] + tri->tri_CA[X];
	y = tri->tri_A[Y] + tri->tri_CA[Y];
	z = tri->tri_A[Z] + tri->tri_CA[Z];
	if ( tri->tri_normals ) {
	    nx = tri->tri_normals[X+6];
	    ny = tri->tri_normals[Y+6];
	    nz = tri->tri_normals[Z+6];
	} else {
	    nx = tri->tri_N[X];
	    ny = tri->tri_N[Y];
	    nz = tri->tri_N[Z];
	}

	/* add this vertex to the vertex tree */
	if ( use_normals ) {
	    face[2] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
	} else {
	    face[2] = Add_vert( x, y, z, verts, tol.dist_sq );
	}
	if ( debug ) {
	    bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		    face[2], x, y, z, nx, ny, nz );
	}

	/* add this face to our list (Add_face checks for duplicates) */
	Add_face( face );
    }


    if ( ap->a_onehit != 0 ) {
	return 1;
    }

    /* get the last hit */
    p = part->pt_back;
    if ( p == part->pt_forw ) {
	return 1;
    }
    surfno = p->pt_outhit->hit_surfno;
    stp = p->pt_outseg->seg_stp;
    if ( stp->st_id != ID_BOT ) {
	if ( debug ) {
	    bu_log( "hit a non-BOT primitive (ignoring)\n" );
	}
	return 0;
    }
    bot = (struct bot_specific *)stp->st_specific;
    if ( bot->bot_facearray ) {
	tri = bot->bot_facearray[surfno];
    } else {
	i = bot->bot_ntri - 1;
	tri = bot->bot_facelist;
	while ( i != surfno ) {
	    i--;
	    tri = tri->tri_forw;
	}
    }
    if ( debug ) {
	bu_log( "\thit at (%g %g %g) on %s surfno = %d\n",
		V3ARGS( p->pt_inhit->hit_point ), stp->st_dp->d_namep, surfno );
    }


    /* get the first vertex */
    x = tri->tri_A[X];
    y = tri->tri_A[Y];
    z = tri->tri_A[Z];
    if ( tri->tri_normals ) {
	nx = tri->tri_normals[X];
	ny = tri->tri_normals[Y];
	nz = tri->tri_normals[Z];
    } else {
	nx = tri->tri_N[X];
	ny = tri->tri_N[Y];
	nz = tri->tri_N[Z];
    }

    /* add this vertex to the vertex tree */
    if ( use_normals ) {
	face[0] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
    } else {
	face[0] = Add_vert( x, y, z, verts, tol.dist_sq );
    }
    if ( debug ) {
	bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		face[0], x, y, z, nx, ny, nz );
    }

    /* get the second vertex */
    x = tri->tri_A[X] + tri->tri_BA[X];
    y = tri->tri_A[Y] + tri->tri_BA[Y];
    z = tri->tri_A[Z] + tri->tri_BA[Z];
    if ( tri->tri_normals ) {
	nx = tri->tri_normals[X+3];
	ny = tri->tri_normals[Y+3];
	nz = tri->tri_normals[Z+3];
    } else {
	nx = tri->tri_N[X];
	ny = tri->tri_N[Y];
	nz = tri->tri_N[Z];
    }

    /* add this vertex to the vertex tree */
    if ( use_normals ) {
	face[1] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
    } else {
	face[1] = Add_vert( x, y, z, verts, tol.dist_sq );
    }
    if ( debug ) {
	bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		face[1], x, y, z, nx, ny, nz );
    }

    /* get the first vertex */
    x = tri->tri_A[X] + tri->tri_CA[X];
    y = tri->tri_A[Y] + tri->tri_CA[Y];
    z = tri->tri_A[Z] + tri->tri_CA[Z];
    if ( tri->tri_normals ) {
	nx = tri->tri_normals[X+6];
	ny = tri->tri_normals[Y+6];
	nz = tri->tri_normals[Z+6];
    } else {
	nx = tri->tri_N[X];
	ny = tri->tri_N[Y];
	nz = tri->tri_N[Z];
    }

    /* add this vertex to the vertex tree */
    if ( use_normals ) {
	face[2] = Add_vert_and_norm( x, y, z, nx, ny, nz, verts, tol.dist_sq );
    } else {
	face[2] = Add_vert( x, y, z, verts, tol.dist_sq );
    }
    if ( debug ) {
	bu_log( "\tvertex %d = ( %g %g %g ), norm = (%g %g %g )\n",
		face[2], x, y, z, nx, ny, nz );
    }

    Add_face( face );

    return 1;
}

int
main( argc, argv )
    int argc;
    char *argv[];
{
    char idbuf[132];
    struct application ap;
    int dir;
    int c;
    long i;
    int database_index;

    if ( debug ) {
	bu_debug = BU_DEBUG_COREDUMP;
    }

    bu_setlinebuf( stderr );

    /* These need to be improved */
    tol.magic = BN_TOL_MAGIC;
    tol.dist = 0.005;
    tol.dist_sq = tol.dist * tol.dist;
    tol.perp = 1e-5;
    tol.para = 1 - tol.perp;

    /* Get command line arguments. */
    memset(&ap, 0, sizeof( struct application ));
    ap.a_onehit = 1;
    while ( (c=bu_getopt( argc, argv, "nmd:g:o:")) != EOF)
    {
	switch ( c )
	{
	    case 'd':	/* debug level */
		debug = atoi( bu_optarg );
		break;
	    case 'm':	/* use first and last hits */
		ap.a_onehit = 0;
		break;
	    case 'g':	/* cell size */
		cell_size = atof( bu_optarg );
		if ( cell_size < tol.dist ) {
		    bu_exit(1, "Cell size too small! (%g)\n", cell_size );
		}
		break;
	    case 'o':	/* VTK polydata output file */
		output_file = bu_optarg;
		break;
	    case 'n':	/* include normals in the VTK data */
		use_normals = 1;
		break;
	}
    }

    if (bu_optind+1 >= argc)
    {
	bu_exit(1, usage, argv[0]);
    }

    if ( output_file )
    {
	if ((fd_out=fopen( output_file, "wb")) == NULL)
	{
	    perror( argv[0] );
	    bu_exit(1, "Cannot open output file (%s)\n", output_file);
	}
    }
    else
	bu_exit(1, "Output file must be specified!\n");


    /* Open BRL-CAD database */
    database_index = bu_optind;
    if ((rtip=rt_dirbuild(argv[bu_optind], idbuf, sizeof(idbuf))) == RTI_NULL )
    {
	bu_exit(1, "rt_durbuild FAILED on %s\n", argv[bu_optind]);
    }

    rtip->rti_space_partition = RT_PART_NUBSPT;

    ap.a_rt_i = rtip;
    ap.a_hit = hit;
    ap.a_miss = miss;
    ap.a_overlap = a_overlap;
    ap.a_logoverlap = rt_silent_logoverlap;

    while ( ++bu_optind < argc )
    {
	if ( rt_gettree( rtip, argv[bu_optind] ) < 0 )
	    bu_log( "rt_gettree failed on %s\n", argv[bu_optind] );
    }

    rt_prep( rtip );

    /* create vertex tree */
    if ( use_normals ) {
	verts = create_vert_tree_w_norms();
    } else {
	verts = create_vert_tree();
    }

    if ( cell_size != 0.0 ) {
	/* do a grid of shots */

	ap.a_onehit = 0;
	for ( dir=X; dir<=Z; dir++ ) {
	    int grid_dir1, grid_dir2;

	    if ( debug ) {
		bu_log( "************** Process direction %d\n", dir );
	    }
	    grid_dir1 = X;
	    if ( grid_dir1 == dir ) {
		grid_dir1++;
	    }
	    grid_dir2 = grid_dir1 + 1;
	    if ( grid_dir2 == dir ) {
		grid_dir2++;
	    }
	    VSETALL( ap.a_ray.r_dir, 0.0 );
	    ap.a_ray.r_dir[dir] = 1.0;

	    /* back off a smidge, just to be safe */
	    ap.a_ray.r_pt[dir] = rtip->mdl_min[dir] - 5.0;

	    /* move just inside the bounding box */
	    ap.a_ray.r_pt[grid_dir1] = rtip->mdl_min[grid_dir1] + tol.dist;

	    /* now fire a grid of rays spaced at "cell_size" distance */
	    while ( ap.a_ray.r_pt[grid_dir1] <= rtip->mdl_max[grid_dir1] ) {
		ap.a_ray.r_pt[grid_dir2] = rtip->mdl_min[grid_dir2] + tol.dist;
		while ( ap.a_ray.r_pt[grid_dir2] <= rtip->mdl_max[grid_dir2] ) {

		    /* shoot a ray */
		    if ( debug ) {
			bu_log( "Shooting a ray from (%g %g %g) in direction (%g %g %g)\n",
				V3ARGS( ap.a_ray.r_pt ), V3ARGS( ap.a_ray.r_dir ) );
		    }
		    (void)rt_shootray( &ap );
		    ap.a_ray.r_pt[grid_dir2] += cell_size;
		}
		ap.a_ray.r_pt[grid_dir1] += cell_size;
	    }
	}
    } else {
	struct soltab *stp;
	struct bot_specific *bot;
	struct tri_specific *tri;
	vect_t inv_dir;

	/* shoot at every triangle */
	for ( i=0; i<rtip->nsolids; i++ ) {
	    stp = rtip->rti_Solids[i];
	    if ( stp->st_id != ID_BOT ) {
		continue;
	    }

	    bot = (struct bot_specific *)stp->st_specific;
	    tri = bot->bot_facelist;
	    while ( tri ) {
		point_t p2, p3, sum;

		VADD2( p2, tri->tri_A, tri->tri_BA );
		VADD2( p3, tri->tri_A, tri->tri_CA );
		VSETALL( sum, 0.0 );
		VADD2( sum, sum, tri->tri_A );
		VADD2( sum, sum, p2 );
		VADD2( sum, sum, p3 );
		VSCALE( ap.a_ray.r_pt, sum, 1.0/3.0 );
		VREVERSE( ap.a_ray.r_dir, tri->tri_N );
		VINVDIR( inv_dir, ap.a_ray.r_dir );
		if ( rt_in_rpp( &ap.a_ray, inv_dir, rtip->mdl_min, rtip->mdl_max ) == 0 ) {
		    tri = tri->tri_forw;
		    continue;
		}
		VJOIN1( ap.a_ray.r_pt, ap.a_ray.r_pt, (ap.a_ray.r_min - 1000.0), ap.a_ray.r_dir );

		/* shoot a ray */
		if ( debug ) {
		    point_t B, C;

		    VADD2( B, tri->tri_A, tri->tri_BA );
		    VADD2( C, tri->tri_A, tri->tri_CA );
		    bu_log( "Shooting a ray from (%g %g %g) in direction (%g %g %g)\n",
			    V3ARGS( ap.a_ray.r_pt ), V3ARGS( ap.a_ray.r_dir ) );
		    bu_log( "\tAt triangle ( %g %g %g ) ( %g %g %g ) ( %g %g %g )\n",
			    V3ARGS( tri->tri_A ), V3ARGS( B ), V3ARGS( C ) );
		}
		(void)rt_shootray( &ap );
		tri = tri->tri_forw;
	    }
	}
    }

    /* now write out the results */
    if ( debug ) {
	bu_log( "Writing output (%ld vertices and %d faces)\n", verts->curr_vert, num_faces );
    }
    fprintf( fd_out, "# vtk DataFile Version 1.0\n" );
    fprintf( fd_out, "%s", argv[database_index] );
    database_index++;
    while ( database_index < argc ) {
	fprintf( fd_out, " %s", argv[database_index] );
	database_index++;
    }
    fprintf( fd_out, "\nASCII\n\nDATASET POLYDATA\n" );
    fprintf( fd_out, "POINTS %ld float\n", verts->curr_vert );
    for ( i=0; i<verts->curr_vert; i++ ) {
	if ( use_normals ) {
	    fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*6] ) );
	} else {
	    fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*3] ) );
	}
    }
    fprintf( fd_out, "POLYGONS %ld %ld\n", num_faces, num_faces*4 );
    for ( i=0; i<num_faces; i++ ) {
	fprintf( fd_out, "3 %ld %ld %ld\n", V3ARGS( &faces[i*3] ) );
    }
    if ( use_normals ) {
	fprintf( fd_out, "POINT_DATA %ld\n", verts->curr_vert );
	fprintf( fd_out, "NORMALS default float\n" );
	for ( i=0; i<verts->curr_vert; i++ ) {
	    fprintf( fd_out, "%g %g %g\n", V3ARGS( &verts->the_array[i*6+3] ) );
	}
    }

    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */
blob
data 3643
set(LIBRT_SOURCES
    bezier_2d_isect.c
    binary_obj.c
    bomb.c
    bool.c
    bundle.c
    cmd.c
    cut.c
    db5_alloc.c
    db5_bin.c
    db5_comb.c
    db5_io.c
    db5_scan.c
    db5_types.c
    db_alloc.c
    db_anim.c
    db_comb.c
    db_flags.c
    db_inmem.c
    db_io.c
    db_lookup.c
    db_match.c
    db_open.c
    db_path.c
    db_scan.c
    db_tree.c
    db_walk.c
    dir.c
    dspline.c
    fortray.c
    globals.c
    htbl.c
    many.c
    mater.c
    memalloc.c
    mirror.c
    mkbundle.c
    opennurbs_ext.cpp
    oslo_calc.c
    oslo_map.c
    pr.c
    prep.c
    primitives/arb8/arb8.c
    primitives/arbn/arbn.c
    primitives/ars/ars.c
    primitives/bot/bot.c
    primitives/brep/brep.cpp
    primitives/bspline/bspline.c
    primitives/bspline/nurb_basis.c
    primitives/bspline/nurb_bezier.c
    primitives/bspline/nurb_bound.c
    primitives/bspline/nurb_c2.c
    primitives/bspline/nurb_copy.c
    primitives/bspline/nurb_diff.c
    primitives/bspline/nurb_eval.c
    primitives/bspline/nurb_flat.c
    primitives/bspline/nurb_interp.c
    primitives/bspline/nurb_knot.c
    primitives/bspline/nurb_norm.c
    primitives/bspline/nurb_plot.c
    primitives/bspline/nurb_poly.c
    primitives/bspline/nurb_ray.c
    primitives/bspline/nurb_refine.c
    primitives/bspline/nurb_reverse.c
    primitives/bspline/nurb_solve.c
    primitives/bspline/nurb_split.c
    primitives/bspline/nurb_tess.c
    primitives/bspline/nurb_trim.c
    primitives/bspline/nurb_trim_util.c
    primitives/bspline/nurb_util.c
    primitives/bspline/nurb_xsplit.c
    primitives/cline/cline.c
    primitives/dsp/dsp.c
    primitives/ebm/ebm.c
    primitives/ehy/ehy.c
    primitives/ell/ell.c
    primitives/epa/epa.c
    primitives/eto/eto.c
    primitives/extrude/extrude.c
    primitives/grip/grip.c
    primitives/half/half.c
    primitives/hf/hf.c
    primitives/hyp/hyp.c
    primitives/metaball/metaball.c
    primitives/nmg/nmg.c
    primitives/nmg/nmg_bool.c
    primitives/nmg/nmg_ck.c
    primitives/nmg/nmg_class.c
    primitives/nmg/nmg_eval.c
    primitives/nmg/nmg_extrude.c
    primitives/nmg/nmg_fcut.c
    primitives/nmg/nmg_fuse.c
    primitives/nmg/nmg_index.c
    primitives/nmg/nmg_info.c
    primitives/nmg/nmg_inter.c
    primitives/nmg/nmg_manif.c
    primitives/nmg/nmg_mesh.c
    primitives/nmg/nmg_misc.c
    primitives/nmg/nmg_mk.c
    primitives/nmg/nmg_mod.c
    primitives/nmg/nmg_plot.c
    primitives/nmg/nmg_pr.c
    primitives/nmg/nmg_pt_fu.c
    primitives/nmg/nmg_rt_isect.c
    primitives/nmg/nmg_rt_segs.c
    primitives/nmg/nmg_tri.c
    primitives/nmg/nmg_visit.c
    primitives/part/part.c
    primitives/pipe/pipe.c
    primitives/poly/poly.c
    primitives/rec/rec.c
    primitives/rhc/rhc.c
    primitives/rpc/rpc.c
    primitives/sketch/sketch.c
    primitives/sph/sph.c
    primitives/submodel/submodel.c
    primitives/superell/superell.c
    primitives/tgc/tgc.c
    primitives/tor/tor.c
    primitives/vol/vol.c
    regionfix.c
    roots.c
    shoot.c
    spectrum.c
    storage.c
    table.c
    tcl.c
    transform.c
    tree.c
    vers.c
    vlist.c
    wdb.c
)

if(MSVC)
    set(LIBRT_SOURCES
        ${LIBRT_SOURCES}
        timer-nt.c
    )
endif(MSVC)

include_directories(
    ../../include
    ../other/libz
    ../other/openNURBS
    ../other/libregex
    ../other/tcl/generic
    ../other/tnt
)

add_definitions(
    -DHAVE_CONFIG_H
    -DBRLCADBUILD
    -DON_DLL_IMPORTS
)

add_library(librt ${LIBRT_SOURCES})
blob
data 4860
# $Id$


lib_LTLIBRARIES = librt.la
noinst_LTLIBRARIES = \
	librt_nil.la \
	librt_xxx.la

BREP_TEST = brep_test
BREP_CPPFLAGS = @SSE@ -DOBJ_BREP=1 ${TNT_CPPFLAGS} ${OPENNURBS_CPPFLAGS}
BREP_LIBADD = ${OPENNURBS}

brep_test_SOURCES = brep_test.cpp
# cannot set per-target CPPFLAGS until automake 1.7+
brep_test_CXXFLAGS = ${SSE}
brep_test_LDADD = \
	librt.la \
	${RT_LIBS}

# cannot set per-target CPPFLAGS until automake 1.7+
AM_CPPFLAGS = \
	${REGEX_CPPFLAGS} \
	${TCL_CPPFLAGS} \
	${BREP_CPPFLAGS}

noinst_PROGRAMS = \
	comb \
	nurb_example \
	${BREP_TEST}

# make sure the example compiles, but don't include it in librt
librt_xxx_la_SOURCES = primitives/xxx/xxx.c

librt_nil_la_SOURCES = \
	bezier_2d_isect.c \
	binary_obj.c \
	bomb.c \
	bool.c \
	bundle.c \
	cmd.c \
	cut.c \
	db5_alloc.c \
	db5_bin.c \
	db5_comb.c \
	db5_io.c \
	db5_scan.c \
	db5_types.c \
	db_alloc.c \
	db_anim.c \
	db_comb.c \
	db_flags.c \
	db_inmem.c \
	db_io.c \
	db_lookup.c \
	db_match.c \
	db_open.c \
	db_path.c \
	db_scan.c \
	db_tree.c \
	db_walk.c \
	dir.c \
	dspline.c \
	fortray.c \
	globals.c \
	htbl.c \
	many.c \
	mater.c \
	memalloc.c \
	mirror.c \
	mkbundle.c \
	opennurbs_ext.cpp \
	oslo_calc.c \
	oslo_map.c \
	pr.c \
	prep.c \
	primitives/arb8/arb8.c \
	primitives/arbn/arbn.c \
	primitives/ars/ars.c \
	primitives/bot/bot.c \
	primitives/brep/brep.cpp \
	primitives/bspline/bspline.c \
	primitives/bspline/nurb_basis.c \
	primitives/bspline/nurb_bezier.c \
	primitives/bspline/nurb_bound.c \
	primitives/bspline/nurb_c2.c \
	primitives/bspline/nurb_copy.c \
	primitives/bspline/nurb_diff.c \
	primitives/bspline/nurb_eval.c \
	primitives/bspline/nurb_flat.c \
	primitives/bspline/nurb_interp.c \
	primitives/bspline/nurb_knot.c \
	primitives/bspline/nurb_norm.c \
	primitives/bspline/nurb_plot.c \
	primitives/bspline/nurb_poly.c \
	primitives/bspline/nurb_ray.c \
	primitives/bspline/nurb_refine.c \
	primitives/bspline/nurb_reverse.c \
	primitives/bspline/nurb_solve.c \
	primitives/bspline/nurb_split.c \
	primitives/bspline/nurb_tess.c \
	primitives/bspline/nurb_trim.c \
	primitives/bspline/nurb_trim_util.c \
	primitives/bspline/nurb_util.c \
	primitives/bspline/nurb_xsplit.c \
	primitives/cline/cline.c \
	primitives/dsp/dsp.c \
	primitives/ebm/ebm.c \
	primitives/ehy/ehy.c \
	primitives/ell/ell.c \
	primitives/epa/epa.c \
	primitives/eto/eto.c \
	primitives/extrude/extrude.c \
	primitives/grip/grip.c \
	primitives/half/half.c \
	primitives/hf/hf.c \
	primitives/hyp/hyp.c \
	primitives/metaball/metaball.c \
	primitives/nmg/nmg.c \
	primitives/nmg/nmg_bool.c \
	primitives/nmg/nmg_ck.c \
	primitives/nmg/nmg_class.c \
	primitives/nmg/nmg_eval.c \
	primitives/nmg/nmg_extrude.c \
	primitives/nmg/nmg_fcut.c \
	primitives/nmg/nmg_fuse.c \
	primitives/nmg/nmg_index.c \
	primitives/nmg/nmg_info.c \
	primitives/nmg/nmg_inter.c \
	primitives/nmg/nmg_manif.c \
	primitives/nmg/nmg_mesh.c \
	primitives/nmg/nmg_misc.c \
	primitives/nmg/nmg_mk.c \
	primitives/nmg/nmg_mod.c \
	primitives/nmg/nmg_plot.c \
	primitives/nmg/nmg_pr.c \
	primitives/nmg/nmg_pt_fu.c \
	primitives/nmg/nmg_rt_isect.c \
	primitives/nmg/nmg_rt_segs.c \
	primitives/nmg/nmg_tri.c \
	primitives/nmg/nmg_visit.c \
	primitives/part/part.c \
	primitives/pipe/pipe.c \
	primitives/poly/poly.c \
	primitives/rec/rec.c \
	primitives/rhc/rhc.c \
	primitives/rpc/rpc.c \
	primitives/sketch/sketch.c \
	primitives/sph/sph.c \
	primitives/submodel/submodel.c \
	primitives/superell/superell.c \
	primitives/tor/tor.c \
	primitives/tgc/tgc.c \
	primitives/vol/vol.c \
	regionfix.c \
	roots.c \
	shoot.c \
	spectrum.c \
	storage.c \
	table.c \
	tcl.c \
	timer42.c \
	transform.c \
	tree.c \
	vers.c \
	vlist.c \
	wdb.c

librt_nil_la_LIBADD = ${BREP_LIBADD}

librt_la_SOURCES =
librt_la_LDFLAGS = -version-info 19:1 -no-undefined -Wc,${FEXCEPTIONS}
librt_la_LIBADD = \
	librt_nil.la \
	${RT_LIBS}

comb_SOURCES = comb.c
comb_LDADD = \
	librt.la \
	${RT_LIBS}

nurb_example_SOURCES = nurb_example.c
nurb_example_LDADD = \
	librt.la \
	${RT_LIBS}

# XXX this should be noinst or moved to include
include_HEADERS = \
	primitives/fixpt.h

dist_man_MANS = librt.3

sample_applicationsdir = $(SAMPLE_APPLICATIONS_DIR)

sample_applications_DATA = \
	nurb_example.c \
	raydebug.tcl

# XXX need to fix these so the timers are selected by configure.ac
EXTRA_DIST = \
	$(sample_applications_DATA) \
        CMakeLists.txt \
	brep_test.cpp \
	parse.c \
	pmalloc.c \
	primitives/bot/g_bot_include.c \
	primitives/nmg/nmg_junk.c \
	timer-nt.c \
	timer52brl.c \
	timerhep.c \
	timerunix.c \
	vshoot.c

if BUILD_REGEX
DEPADD = src/other/libregex
endif

DEPENDS = src/libbn src/libsysv src/other/openNURBS ${DEPADD}

include $(top_srcdir)/misc/Makefile.defs

FAST_OBJECTS = \
	$(librt_nil_la_OBJECTS) \
	$(librt_la_OBJECTS) \
	$(lib_LTLIBRARIES) \
	$(comb_OBJECTS) \
	$(nurb_example_OBJECTS) \
	$(noinst_PROGRAMS)
commit refs/heads/pre-7-12-6
mark :32046
committer Clifford Yapp <starseeker@brlcad.org> 1217335867 +0000
data 50
Start merging the primitives reorg into pre-7-12-6
from 253a67acd7796a6767b5edbc1a39950d98893303
M 100644 2256e9672132b16e2c48f4b9fa5e56d9cce25ffd "include/Makefile.am"
M 100644 e6337c36d56f6c1ee17be100f3bf008e800b7464 "include/bot.h"
M 100644 6b545bcc1e12ef966a9243dbe51d5abe4234eaee "misc/doxygen_structure"
M 100644 430dd97b62519e47d7f30092da22ae040080bcee "misc/win32-msvc8/librt/librt.vcproj"
M 100644 4df93af6c6a9412de6c9e75f7365028a6efbd92a "src/conv/bot_shell-vtk.c"
M 100644 5bfd78cfccc154e1df9d3c1566762713a15c92a0 "src/librt/CMakeLists.txt"
M 100644 055ea29946e225a9eaf3a8c519294fc8b026eff2 "src/librt/Makefile.am"
M 100644 cab360314d543b20538e9851d0ee9e65c98319bf "src/librt/primitives/g_ars.c"
M 100644 183b5cdf4e9ca3ee98ed64c87690e979f8ed5e3a "src/librt/primitives/g_bot.c"
M 100644 24cbb789be0ba8cea720943030d942c96b3ccf10 "src/librt/primitives/fixpt.h"
M 100644 fcfb1a0d60f3f7073c169d2c90c3dcc4326c1dd4 "src/librt/primitives/g_arb.c"
M 100644 89fa696cd245ed5810fcc84a2485c09a55dca3f3 "src/librt/primitives/g_arbn.c"
M 100644 94487965164944c6c7624dd18a0f322a1527a0ba "src/librt/primitives/g_bot_include.c"
M 100644 81e5e2e1d7635ee46ace4c749cb85d6409c5dd7f "src/librt/primitives/g_brep.cpp"
M 100644 ad81257865db71d6ff81377047e5638ffdffb89f "src/librt/primitives/g_cline.c"
M 100644 e1ace864a2d2660e952788998003dc126c55f9aa "src/librt/primitives/g_dsp.c"
M 100644 d5c393f5bbb58da67bc6f6e33791c1cca0e6416c "src/librt/primitives/g_ebm.c"
M 100644 af398a13752e111f7880df8c8710e962357a05b0 "src/librt/primitives/g_ehy.c"
M 100644 e775bf8466d119e8ac4ad10582eb175d467b5091 "src/librt/primitives/g_ell.c"
M 100644 cd2533083ecdf1a166f45d84361340bdcd9dff1b "src/librt/primitives/g_epa.c"
M 100644 495a6e96746f254be16064e2d335fe3616f20a5a "src/librt/primitives/g_eto.c"
M 100644 414a5dec77293f80d17e2eadf4deb5c3127e35de "src/librt/primitives/g_extrude.c"
M 100644 7063b9d87631d9078d1e5669b6efc0462df1aa2f "src/librt/primitives/g_grip.c"
M 100644 0b05198a81efb112bfd4ae46efd0c528cbec16a9 "src/librt/primitives/g_half.c"
M 100644 94ee610bdac7a32e7ebe5c3633fe64cb58473523 "src/librt/primitives/g_hf.c"
M 100644 b094c3034bff775a130d6df55d91332633c652ea "src/librt/primitives/g_hyp.c"
M 100644 b6afb1c9a4559286f449afbce1df4f9b63838991 "src/librt/primitives/g_metaball.c"
M 100644 0fe372674270c18360b6560fecdcb6a6e0cbd585 "src/librt/primitives/g_nmg.c"
M 100644 708d953864ea29817af92139d13d9382768dd2f5 "src/librt/primitives/g_nurb.c"
M 100644 0952a3710e2a574300205e0ad7f2986a3ad33f23 "src/librt/primitives/g_part.c"
M 100644 b26ff12de94407ded73c10eaf8a82f50e8896c5a "src/librt/primitives/g_pg.c"
M 100644 e59a035549d087c17ba380dcfe35ee81a32232a1 "src/librt/primitives/g_pipe.c"
M 100644 4dd2486ce797a8b527ead994f1a9aaca22a12a00 "src/librt/primitives/g_rec.c"
M 100644 cca1425c609b39c235e68ec0d8e5d8ee50921b52 "src/librt/primitives/g_rhc.c"
M 100644 696b77301a14195d2a64297e520d7b424e64ed4c "src/librt/primitives/g_rpc.c"
M 100644 04e754b6ee763d69fb6ed5c3f98e2d741eef7e41 "src/librt/primitives/g_sketch.c"
M 100644 5315cbf2a4128b869974623ecccb5b4a245b7764 "src/librt/primitives/g_sph.c"
M 100644 ebd2134aeaa5f4a597f018c37f144d6987636b77 "src/librt/primitives/g_submodel.c"
M 100644 749d2435c53a49c513c6b1139f4b71d337c7e4a7 "src/librt/primitives/g_superell.c"
M 100644 80e9e4cf01607b02defe68da3f8d3d9e114eb56d "src/librt/primitives/g_tgc.c"
M 100644 c2186042e6cbc65c3ba4b0b91ccbc50acaa9a7b1 "src/librt/primitives/g_torus.c"
M 100644 4849f3d5d2392c864a1cdbdd83141e489eb764c9 "src/librt/primitives/g_vol.c"
M 100644 ae01a16dbd60e37f4ef0915f02f9911e06d5b0eb "src/librt/primitives/g_xxx.c"
M 100644 cb881bcf9f7c7102c8ba25f8dad072f45344d636 "src/librt/primitives/nmg/nmg_bool.c"
M 100644 a921d7a33d141c674ae01fa60495aec801bba220 "src/librt/primitives/nmg/nmg_ck.c"
M 100644 3fd34c0e26f8774318317e00a6b984645089aee0 "src/librt/primitives/nmg/nmg_class.c"
M 100644 889b43b970fac5ed51af0ce7f9f3846bfbd2a92a "src/librt/primitives/nmg/nmg_eval.c"
M 100644 3cb58ac9dcf14bd0127f8da5bf50a7aa7267d1a0 "src/librt/primitives/nmg/nmg_extrude.c"
M 100644 919b0b47e594f0d67a6f6ce5f619aa10d5730689 "src/librt/primitives/nmg/nmg_fcut.c"
M 100644 40d6d5702ad633068b60688a16e89de704df84c6 "src/librt/primitives/nmg/nmg_fuse.c"
M 100644 81193fbea926f704fb042b61d53b582bd776c8a1 "src/librt/primitives/nmg/nmg_index.c"
M 100644 c8edd9d6455b0a33f07e416ea4387c67e1cf64c6 "src/librt/primitives/nmg/nmg_info.c"
M 100644 b8a98f356e99fe7f25480886daf72e81e74a615b "src/librt/primitives/nmg/nmg_inter.c"
M 100644 1047ee9c4874a76506010096066d0cb73667c687 "src/librt/primitives/nmg/nmg_junk.c"
M 100644 bd4b0de579c585000ee62686fef09b05a34b6b6e "src/librt/primitives/nmg/nmg_manif.c"
M 100644 83c6b3033acd37dd47306bc6d75d12528ad2f8a4 "src/librt/primitives/nmg/nmg_mesh.c"
M 100644 06167196049db6e65488eda34c6439fdacd606f6 "src/librt/primitives/nmg/nmg_misc.c"
M 100644 84fc086c0cc72a65c4bffb23102a5c19971418df "src/librt/primitives/nmg/nmg_mk.c"
M 100644 c928f72a607796e1ee4be7f7284b073492cca857 "src/librt/primitives/nmg/nmg_mod.c"
M 100644 9a65df62dfe2f0458fa962cbb7ac9be2a7f0e505 "src/librt/primitives/nmg/nmg_plot.c"
M 100644 c2739699ebe08f3a755bce59e8c459d213d2aed9 "src/librt/primitives/nmg/nmg_pr.c"
M 100644 169c74206b839e719087cc307e0e3bd17c1509c3 "src/librt/primitives/nmg/nmg_pt_fu.c"
M 100644 41da4adbdddcf0978cf658690673d12aa89782e6 "src/librt/primitives/nmg/nmg_rt_isect.c"
M 100644 4a4207184c4e532078659ab4054c363b52ec96c9 "src/librt/primitives/nmg/nmg_rt_segs.c"
M 100644 2c10567fcd129a362852155fe9638b4fad0f0db8 "src/librt/primitives/nmg/nmg_tri.c"
M 100644 31c87034c0cfcf2b9579c6a4e3f78a4024e53cfd "src/librt/primitives/nmg/nmg_visit.c"
M 100644 fcfb1a0d60f3f7073c169d2c90c3dcc4326c1dd4 "src/librt/primitives/arb8/arb8.c"
M 100644 fcfb1a0d60f3f7073c169d2c90c3dcc4326c1dd4 "src/librt/primitives/arb8/arb8.c"
M 100644 89fa696cd245ed5810fcc84a2485c09a55dca3f3 "src/librt/primitives/arbn/arbn.c"
M 100644 89fa696cd245ed5810fcc84a2485c09a55dca3f3 "src/librt/primitives/arbn/arbn.c"
M 100644 cab360314d543b20538e9851d0ee9e65c98319bf "src/librt/primitives/ars/ars.c"
M 100644 cab360314d543b20538e9851d0ee9e65c98319bf "src/librt/primitives/ars/ars.c"
M 100644 183b5cdf4e9ca3ee98ed64c87690e979f8ed5e3a "src/librt/primitives/bot/bot.c"
M 100644 94487965164944c6c7624dd18a0f322a1527a0ba "src/librt/primitives/bot/g_bot_include.c"
M 100644 183b5cdf4e9ca3ee98ed64c87690e979f8ed5e3a "src/librt/primitives/bot/bot.c"
M 100644 94487965164944c6c7624dd18a0f322a1527a0ba "src/librt/primitives/bot/g_bot_include.c"
M 100644 81e5e2e1d7635ee46ace4c749cb85d6409c5dd7f "src/librt/primitives/brep/brep.cpp"
M 100644 708d953864ea29817af92139d13d9382768dd2f5 "src/librt/primitives/bspline/bspline.c"
M 100644 277ddc6a12dc2c1f1447a07f89fbba02d5a69e54 "src/librt/primitives/bspline/nurb_basis.c"
M 100644 74676968f1ff803eb7764a50833c338a8e343a84 "src/librt/primitives/bspline/nurb_bezier.c"
M 100644 c62d5fb47a0056415334b9ab6373a8bec07cdd47 "src/librt/primitives/bspline/nurb_bound.c"
M 100644 b09a50b3945a28268204e73837516d6edad2e1a6 "src/librt/primitives/bspline/nurb_c2.c"
M 100644 29dfde878ccc45b4c4de67f68e15724b450b897e "src/librt/primitives/bspline/nurb_copy.c"
M 100644 1508fc9251e04d8844bf8ce1d1ed1a4b9784863f "src/librt/primitives/bspline/nurb_diff.c"
M 100644 432e69ca258978b7dc67b44c79a3d873a18f3460 "src/librt/primitives/bspline/nurb_eval.c"
M 100644 fe7f74dbd39c05f30319ba2063a22700a802d9ee "src/librt/primitives/bspline/nurb_flat.c"
M 100644 96acd7c321f7f8a80244e589ea6825c21e0d75dd "src/librt/primitives/bspline/nurb_interp.c"
M 100644 f495a56ba28dbd4a966ca56ee4bb2b0d4de3a9f6 "src/librt/primitives/bspline/nurb_knot.c"
M 100644 43547c10b6683ea35ee208eab990efdbe80f1ec0 "src/librt/primitives/bspline/nurb_norm.c"
M 100644 d1b24c2a269eaa0fab9e840c7bda6b9fb3637f61 "src/librt/primitives/bspline/nurb_plot.c"
M 100644 127fd38d6568e42fa0f5d51c54c59c90bccb3428 "src/librt/primitives/bspline/nurb_poly.c"
M 100644 6ba162e840a609e1469bf930108cc005e9cc5d32 "src/librt/primitives/bspline/nurb_ray.c"
M 100644 d172b57f7090ccc2fcd8d9712b6307c54eba8ba2 "src/librt/primitives/bspline/nurb_refine.c"
M 100644 933792edec6d796ded183121db0c946b5afab08e "src/librt/primitives/bspline/nurb_reverse.c"
M 100644 dc04b6ec10bc47cd38291242120fc34b42115570 "src/librt/primitives/bspline/nurb_solve.c"
M 100644 739cf657d95a7154c486ed6efb00a33621408a3d "src/librt/primitives/bspline/nurb_split.c"
M 100644 6642ec16ab1233f50acabb078feca8b904f523b9 "src/librt/primitives/bspline/nurb_tess.c"
M 100644 464e5c4bfa0e45a4eb36b5bf7b29c5d4be97fda4 "src/librt/primitives/bspline/nurb_trim.c"
M 100644 0f52e125f3c45f796da1108d1a0b4c30cfa3995f "src/librt/primitives/bspline/nurb_trim_util.c"
M 100644 a9448b6565084284efa03a37466fd34dab3bddd7 "src/librt/primitives/bspline/nurb_util.c"
M 100644 8cb0ad6784a66956ab8815f6aaa948ab974a7f1d "src/librt/primitives/bspline/nurb_xsplit.c"
M 100644 ad81257865db71d6ff81377047e5638ffdffb89f "src/librt/primitives/cline/cline.c"
M 100644 e1ace864a2d2660e952788998003dc126c55f9aa "src/librt/primitives/dsp/dsp.c"
M 100644 744d517316ad969e365e1bad2f60dd3ae8437e0c "src/librt/primitives/ebm/ebm.c"
M 100644 744d517316ad969e365e1bad2f60dd3ae8437e0c "src/librt/primitives/ebm/ebm.c"
M 100644 af398a13752e111f7880df8c8710e962357a05b0 "src/librt/primitives/ehy/ehy.c"
M 100644 e775bf8466d119e8ac4ad10582eb175d467b5091 "src/librt/primitives/ell/ell.c"
M 100644 cd2533083ecdf1a166f45d84361340bdcd9dff1b "src/librt/primitives/epa/epa.c"
M 100644 495a6e96746f254be16064e2d335fe3616f20a5a "src/librt/primitives/eto/eto.c"
M 100644 414a5dec77293f80d17e2eadf4deb5c3127e35de "src/librt/primitives/extrude/extrude.c"
M 100644 24cbb789be0ba8cea720943030d942c96b3ccf10 "src/librt/primitives/fixpt.h"
M 100644 fcfb1a0d60f3f7073c169d2c90c3dcc4326c1dd4 "src/librt/primitives/g_arb.c"
M 100644 89fa696cd245ed5810fcc84a2485c09a55dca3f3 "src/librt/primitives/g_arbn.c"
M 100644 cab360314d543b20538e9851d0ee9e65c98319bf "src/librt/primitives/g_ars.c"
M 100644 183b5cdf4e9ca3ee98ed64c87690e979f8ed5e3a "src/librt/primitives/g_bot.c"
M 100644 94487965164944c6c7624dd18a0f322a1527a0ba "src/librt/primitives/g_bot_include.c"
M 100644 81e5e2e1d7635ee46ace4c749cb85d6409c5dd7f "src/librt/primitives/g_brep.cpp"
M 100644 ad81257865db71d6ff81377047e5638ffdffb89f "src/librt/primitives/g_cline.c"
M 100644 e1ace864a2d2660e952788998003dc126c55f9aa "src/librt/primitives/g_dsp.c"
M 100644 d5c393f5bbb58da67bc6f6e33791c1cca0e6416c "src/librt/primitives/g_ebm.c"
M 100644 af398a13752e111f7880df8c8710e962357a05b0 "src/librt/primitives/g_ehy.c"
M 100644 e775bf8466d119e8ac4ad10582eb175d467b5091 "src/librt/primitives/g_ell.c"
M 100644 cd2533083ecdf1a166f45d84361340bdcd9dff1b "src/librt/primitives/g_epa.c"
M 100644 495a6e96746f254be16064e2d335fe3616f20a5a "src/librt/primitives/g_eto.c"
M 100644 414a5dec77293f80d17e2eadf4deb5c3127e35de "src/librt/primitives/g_extrude.c"
M 100644 7063b9d87631d9078d1e5669b6efc0462df1aa2f "src/librt/primitives/g_grip.c"
M 100644 0b05198a81efb112bfd4ae46efd0c528cbec16a9 "src/librt/primitives/g_half.c"
M 100644 94ee610bdac7a32e7ebe5c3633fe64cb58473523 "src/librt/primitives/g_hf.c"
M 100644 b094c3034bff775a130d6df55d91332633c652ea "src/librt/primitives/g_hyp.c"
M 100644 b6afb1c9a4559286f449afbce1df4f9b63838991 "src/librt/primitives/g_metaball.c"
M 100644 0fe372674270c18360b6560fecdcb6a6e0cbd585 "src/librt/primitives/g_nmg.c"
M 100644 708d953864ea29817af92139d13d9382768dd2f5 "src/librt/primitives/g_nurb.c"
M 100644 0952a3710e2a574300205e0ad7f2986a3ad33f23 "src/librt/primitives/g_part.c"
M 100644 b26ff12de94407ded73c10eaf8a82f50e8896c5a "src/librt/primitives/g_pg.c"
M 100644 e59a035549d087c17ba380dcfe35ee81a32232a1 "src/librt/primitives/g_pipe.c"
M 100644 4dd2486ce797a8b527ead994f1a9aaca22a12a00 "src/librt/primitives/g_rec.c"
M 100644 cca1425c609b39c235e68ec0d8e5d8ee50921b52 "src/librt/primitives/g_rhc.c"
M 100644 696b77301a14195d2a64297e520d7b424e64ed4c "src/librt/primitives/g_rpc.c"
M 100644 04e754b6ee763d69fb6ed5c3f98e2d741eef7e41 "src/librt/primitives/g_sketch.c"
M 100644 5315cbf2a4128b869974623ecccb5b4a245b7764 "src/librt/primitives/g_sph.c"
M 100644 ebd2134aeaa5f4a597f018c37f144d6987636b77 "src/librt/primitives/g_submodel.c"
M 100644 749d2435c53a49c513c6b1139f4b71d337c7e4a7 "src/librt/primitives/g_superell.c"
M 100644 80e9e4cf01607b02defe68da3f8d3d9e114eb56d "src/librt/primitives/g_tgc.c"
M 100644 c2186042e6cbc65c3ba4b0b91ccbc50acaa9a7b1 "src/librt/primitives/g_torus.c"
M 100644 4849f3d5d2392c864a1cdbdd83141e489eb764c9 "src/librt/primitives/g_vol.c"
M 100644 ae01a16dbd60e37f4ef0915f02f9911e06d5b0eb "src/librt/primitives/g_xxx.c"
M 100644 7063b9d87631d9078d1e5669b6efc0462df1aa2f "src/librt/primitives/grip/grip.c"
M 100644 0b05198a81efb112bfd4ae46efd0c528cbec16a9 "src/librt/primitives/half/half.c"
M 100644 94ee610bdac7a32e7ebe5c3633fe64cb58473523 "src/librt/primitives/hf/hf.c"
M 100644 01b5e468573d22195a13b550a42289e5e977ac62 "src/librt/primitives/hyp/hyp.c"
M 100644 b6afb1c9a4559286f449afbce1df4f9b63838991 "src/librt/primitives/metaball/metaball.c"
M 100644 0fe372674270c18360b6560fecdcb6a6e0cbd585 "src/librt/primitives/nmg/nmg.c"
M 100644 cb881bcf9f7c7102c8ba25f8dad072f45344d636 "src/librt/primitives/nmg/nmg_bool.c"
M 100644 a921d7a33d141c674ae01fa60495aec801bba220 "src/librt/primitives/nmg/nmg_ck.c"
M 100644 3fd34c0e26f8774318317e00a6b984645089aee0 "src/librt/primitives/nmg/nmg_class.c"
M 100644 889b43b970fac5ed51af0ce7f9f3846bfbd2a92a "src/librt/primitives/nmg/nmg_eval.c"
M 100644 3cb58ac9dcf14bd0127f8da5bf50a7aa7267d1a0 "src/librt/primitives/nmg/nmg_extrude.c"
M 100644 919b0b47e594f0d67a6f6ce5f619aa10d5730689 "src/librt/primitives/nmg/nmg_fcut.c"
M 100644 40d6d5702ad633068b60688a16e89de704df84c6 "src/librt/primitives/nmg/nmg_fuse.c"
M 100644 81193fbea926f704fb042b61d53b582bd776c8a1 "src/librt/primitives/nmg/nmg_index.c"
M 100644 c8edd9d6455b0a33f07e416ea4387c67e1cf64c6 "src/librt/primitives/nmg/nmg_info.c"
M 100644 b8a98f356e99fe7f25480886daf72e81e74a615b "src/librt/primitives/nmg/nmg_inter.c"
M 100644 1047ee9c4874a76506010096066d0cb73667c687 "src/librt/primitives/nmg/nmg_junk.c"
M 100644 bd4b0de579c585000ee62686fef09b05a34b6b6e "src/librt/primitives/nmg/nmg_manif.c"
M 100644 83c6b3033acd37dd47306bc6d75d12528ad2f8a4 "src/librt/primitives/nmg/nmg_mesh.c"
M 100644 06167196049db6e65488eda34c6439fdacd606f6 "src/librt/primitives/nmg/nmg_misc.c"
M 100644 84fc086c0cc72a65c4bffb23102a5c19971418df "src/librt/primitives/nmg/nmg_mk.c"
M 100644 c928f72a607796e1ee4be7f7284b073492cca857 "src/librt/primitives/nmg/nmg_mod.c"
M 100644 9a65df62dfe2f0458fa962cbb7ac9be2a7f0e505 "src/librt/primitives/nmg/nmg_plot.c"
M 100644 c2739699ebe08f3a755bce59e8c459d213d2aed9 "src/librt/primitives/nmg/nmg_pr.c"
M 100644 169c74206b839e719087cc307e0e3bd17c1509c3 "src/librt/primitives/nmg/nmg_pt_fu.c"
M 100644 41da4adbdddcf0978cf658690673d12aa89782e6 "src/librt/primitives/nmg/nmg_rt_isect.c"
M 100644 4a4207184c4e532078659ab4054c363b52ec96c9 "src/librt/primitives/nmg/nmg_rt_segs.c"
M 100644 2c10567fcd129a362852155fe9638b4fad0f0db8 "src/librt/primitives/nmg/nmg_tri.c"
M 100644 31c87034c0cfcf2b9579c6a4e3f78a4024e53cfd "src/librt/primitives/nmg/nmg_visit.c"
M 100644 0952a3710e2a574300205e0ad7f2986a3ad33f23 "src/librt/primitives/part/part.c"
M 100644 e59a035549d087c17ba380dcfe35ee81a32232a1 "src/librt/primitives/pipe/pipe.c"
M 100644 b26ff12de94407ded73c10eaf8a82f50e8896c5a "src/librt/primitives/poly/poly.c"
M 100644 4dd2486ce797a8b527ead994f1a9aaca22a12a00 "src/librt/primitives/rec/rec.c"
M 100644 cca1425c609b39c235e68ec0d8e5d8ee50921b52 "src/librt/primitives/rhc/rhc.c"
M 100644 696b77301a14195d2a64297e520d7b424e64ed4c "src/librt/primitives/rpc/rpc.c"
M 100644 04e754b6ee763d69fb6ed5c3f98e2d741eef7e41 "src/librt/primitives/sketch/sketch.c"
M 100644 5315cbf2a4128b869974623ecccb5b4a245b7764 "src/librt/primitives/sph/sph.c"
M 100644 ebd2134aeaa5f4a597f018c37f144d6987636b77 "src/librt/primitives/submodel/submodel.c"
M 100644 749d2435c53a49c513c6b1139f4b71d337c7e4a7 "src/librt/primitives/superell/superell.c"
M 100644 80e9e4cf01607b02defe68da3f8d3d9e114eb56d "src/librt/primitives/tgc/tgc.c"
M 100644 c2186042e6cbc65c3ba4b0b91ccbc50acaa9a7b1 "src/librt/primitives/tor/tor.c"
M 100644 970bdc08148b349d133b0ec22d1cae556322f628 "src/librt/primitives/vol/vol.c"
M 100644 d09fb32f449f5554a8c93d033ba949f676454796 "src/librt/primitives/xxx/xxx.c"
M 100644 5e52a1239d3d9b66a75e2906f2627496290f4731 "src/librt/primitives/xxx/xxx.h"
D "src/librt/bot.h"
D "src/librt/fixpt.h"
D "src/librt/g_arb.c"
D "src/librt/g_arbn.c"
D "src/librt/g_ars.c"
D "src/librt/g_bot.c"
D "src/librt/g_bot_include.c"
D "src/librt/g_brep.cpp"
D "src/librt/g_cline.c"
D "src/librt/g_dsp.c"
D "src/librt/g_ebm.c"
D "src/librt/g_ehy.c"
D "src/librt/g_ell.c"
D "src/librt/g_epa.c"
D "src/librt/g_eto.c"
D "src/librt/g_extrude.c"
D "src/librt/g_grip.c"
D "src/librt/g_half.c"
D "src/librt/g_hf.c"
D "src/librt/g_hyp.c"
D "src/librt/g_metaball.c"
D "src/librt/g_nmg.c"
D "src/librt/g_nurb.c"
D "src/librt/g_part.c"
D "src/librt/g_pg.c"
D "src/librt/g_pipe.c"
D "src/librt/g_rec.c"
D "src/librt/g_rhc.c"
D "src/librt/g_rpc.c"
D "src/librt/g_sketch.c"
D "src/librt/g_sph.c"
D "src/librt/g_submodel.c"
D "src/librt/g_superell.c"
D "src/librt/g_tgc.c"
D "src/librt/g_torus.c"
D "src/librt/g_vol.c"
D "src/librt/g_xxx.c"
D "src/librt/nmg_bool.c"
D "src/librt/nmg_ck.c"
D "src/librt/nmg_class.c"
D "src/librt/nmg_eval.c"
D "src/librt/nmg_extrude.c"
D "src/librt/nmg_fcut.c"
D "src/librt/nmg_fuse.c"
D "src/librt/nmg_index.c"
D "src/librt/nmg_info.c"
D "src/librt/nmg_inter.c"
D "src/librt/nmg_junk.c"
D "src/librt/nmg_manif.c"
D "src/librt/nmg_mesh.c"
D "src/librt/nmg_misc.c"
D "src/librt/nmg_mk.c"
D "src/librt/nmg_mod.c"
D "src/librt/nmg_plot.c"
D "src/librt/nmg_pr.c"
D "src/librt/nmg_pt_fu.c"
D "src/librt/nmg_rt_isect.c"
D "src/librt/nmg_rt_segs.c"
D "src/librt/nmg_tri.c"
D "src/librt/nmg_visit.c"
D "src/librt/nurb_basis.c"
D "src/librt/nurb_bezier.c"
D "src/librt/nurb_bound.c"
D "src/librt/nurb_c2.c"
D "src/librt/nurb_copy.c"
D "src/librt/nurb_diff.c"
D "src/librt/nurb_eval.c"
D "src/librt/nurb_flat.c"
D "src/librt/nurb_interp.c"
D "src/librt/nurb_knot.c"
D "src/librt/nurb_norm.c"
D "src/librt/nurb_plot.c"
D "src/librt/nurb_poly.c"
D "src/librt/nurb_ray.c"
D "src/librt/nurb_refine.c"
D "src/librt/nurb_reverse.c"
D "src/librt/nurb_solve.c"
D "src/librt/nurb_split.c"
D "src/librt/nurb_tess.c"
D "src/librt/nurb_trim.c"
D "src/librt/nurb_trim_util.c"
D "src/librt/nurb_util.c"
D "src/librt/nurb_xsplit.c"
