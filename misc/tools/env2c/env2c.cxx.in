/*                       E N V 2 C . C X X
 * BRL-CAD
 *
 * Copyright (c) 2018 United States Government as represented by
 * the U.S. Army Research Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.
 *
 * 3. The name of the author may not be used to endorse or promote
 * products derived from this software without specific prior written
 * permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/** @file env2c.cxx
 *
 * Find all environment variables checked with getenv by BRL-CAD
 * and generate a file defining a static array listing them.
 */

#include <cstdio>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <regex>
#include <set>
#include <sstream>
#include <string>

#include "./tinydir.h"

int
process_file(tinydir_file *f, std::set<std::string> &evars, int verbose)
{
    std::regex srcfile_regex(".*[.](cxx|c|cpp|h|hpp|hxx)(\\.in)*$");
    if (std::regex_match(std::string(f->name), srcfile_regex)) {
	std::regex getenv_regex(".*getenv\\(\\\".*");
	std::string sline;
	std::string fpath = std::string(f->path);
	std::ifstream fs;
	fs.open(fpath);
	if (!fs.is_open()) {
	    return -1;
	}
	while (std::getline(fs, sline)) {
	    if (std::regex_match(sline, getenv_regex)) {
		std::regex evar_regex(".*getenv\\(\\\"([^\\\"]+)\\\"\\).*");
		std::smatch envvar;
		if (!std::regex_search(sline, envvar, evar_regex)) {
		    std::cerr << "Error, could not find environment variable in line!\n" << sline << "\n";
		    return -1;
		} else {
		    evars.insert(std::string(envvar[1]));
		    if (verbose) {
			std::cout << f->path << ": " << envvar[1] << "\n";
		    }
		}
	    }
	}
    }
    return 0;
}

int
process_files(tinydir_dir *dir, std::set<std::string> &evars, int verbose)
{
    while (dir->has_next) {
	tinydir_file f;
	if (tinydir_readfile(dir, &f) == -1) {
	    std::cerr << "Error reading file " << f.path << "/" << f.name << "\n";
	    return -1;
	}
	// TODO - this is necessary but not sufficient.  If src dir = bin dir, this
	// will cause breakage.  Need to have a more nuanced filter that keeps output
	// paths out of the search (bin, lib, CMake*, etc.) to preserve in-src-dir
	// capability.
	if (f.is_dir && std::string(f.path) != std::string("@CMAKE_BINARY_DIR@")) {
	    std::regex skip_regex("(other|tests|tools|bullet)");
	    std::string dname(f.name);
	    if (dname != std::string(".") && dname != std::string("..") && dname != std::string(".svn") && dname != std::string(".git") && !std::regex_match(dname, skip_regex)) {
		tinydir_dir fdir;
		if (tinydir_open(&fdir, f.path) == -1) {
		    std::cerr << "Error opening directory " << f.path << "\n";
		    return -1;
		}
		process_files(&fdir, evars, verbose);
		tinydir_close(&fdir);
	    }
	} else {
	    process_file(&f, evars, verbose);
	}

	if (tinydir_next(dir) == -1) {
	    std::cerr << "Error getting next file in directory " << dir->path << "\n";
	    return -1;
	}
    }
    return 0;
}

int
main(int argc, const char *argv[])
{
    int verbose = 0;
    std::set<std::string> evars;
    std::set<std::string>::iterator e_it;
    tinydir_dir rdir;

    if (argc < 3) {
	std::cerr << "Usage: env2c [-v] root_dir output_file\n";
	return -1;
    }

    if (argc == 4) {
	if (std::string(argv[1]) == std::string("-v")) {
	    argc--;
	    argv++;
	    verbose = 1;
	} else {
	    std::cerr << "Usage: env2c [-v] root_dir output_file\n";
	    return -1;
	}
    }


    if (tinydir_open(&rdir, argv[1]) == -1) {
	return -1;
    }

    std::ofstream ofile;
    ofile.open(argv[2], std::fstream::trunc);
    if (!ofile.is_open()) {
	std::cerr << "Unable to open output file " << argv[2] << " for writing!\n";
	tinydir_close(&rdir);
	return -1;
    }


    process_files(&rdir, evars, verbose);
    tinydir_close(&rdir);

    ofile << "static const char * const env_vars[] = {\n";
    for (e_it = evars.begin(); e_it != evars.end(); e_it++) {
	ofile << "\"" << *e_it << "\",\n";
    }
    ofile << "\"NULL\"";
    ofile << "};\n";

    ofile.close();

    return 0;
}

/*
 * Local Variables:
 * mode: C
 * tab-width: 8
 * indent-tabs-mode: t
 * c-file-style: "stroustrup"
 * End:
 * ex: shiftwidth=4 tabstop=8
 */

